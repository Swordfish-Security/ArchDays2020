variables:
    DOCKER_HOST: "tcp://docker:2375/"
    DOCKERFILE: "Dockerfile" # name of the Dockerfile to analyse   
    DOCKERIMAGE: "vulne-wheezy.tar" # name of the Docker image to analyse
    SHOWSTOPPER_PRIORITY: "CRITICAL" # what level of criticality will fail Trivy job
    TRIVYCACHE: "$CI_PROJECT_DIR/.cache" # where to cache Trivy database of vulnerabilities for faster reuse
    ARTIFACT_FOLDER: "$CI_PROJECT_DIR"
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
 
services:
    - docker:dind 
 
stages:
    - build
    - scan
    - report
    - publish

build:
  stage: build
  image: docker:git
  tags:
  - docker

  script:
    # fetching and building a vulnerable app
    - git clone https://github.com/Swordfish-Security/Pentest-In-Docker
    - cd Pentest-In-Docker
    - docker build -t vulne-wheezy .
    - cp $DOCKERFILE $ARTIFACT_FOLDER
    # saving the built image into tar to pass to other stages
    - docker save vulne-wheezy -o $ARTIFACT_FOLDER/vulne-wheezy.tar

  artifacts:
    when: always # return artifacts even after job failure       
    paths:
      - $ARTIFACT_FOLDER/vulne-wheezy.tar
      - $ARTIFACT_FOLDER/Dockerfile
 
HadoLint:
    # Basic lint analysis of Dockerfile instructions
    stage: scan
    image: docker:git
    tags:
    - docker
    
    after_script:
    - cat $ARTIFACT_FOLDER/hadolint_results.json
 
    script:
    - export VERSION=$(wget -q -O - https://api.github.com/repos/hadolint/hadolint/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/hadolint/hadolint/releases/download/v${VERSION}/hadolint-Linux-x86_64 && chmod +x hadolint-Linux-x86_64
     
    # NB: hadolint will always exit with 0 exit code
    # getting a test Dockerfile to analyse
    - ./hadolint-Linux-x86_64 -f json $ARTIFACT_FOLDER/$DOCKERFILE > $ARTIFACT_FOLDER/hadolint_results.json || exit 0
 
    artifacts:
        when: always # return artifacts even after job failure       
        paths:
        - $ARTIFACT_FOLDER/hadolint_results.json
 
Dockle:
    # Analysing best practices about docker image (users permissions, instructions followed when image was built, etc.)
    stage: scan   
    image: docker:git
    tags:
    - docker

    after_script:
    - cat $ARTIFACT_FOLDER/dockle_results.json
 
    script:
    - export VERSION=$(wget -q -O - https://api.github.com/repos/goodwithtech/dockle/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.tar.gz && tar zxf dockle_${VERSION}_Linux-64bit.tar.gz    
    - ./dockle --exit-code 1 -f json --output $ARTIFACT_FOLDER/dockle_results.json --input $ARTIFACT_FOLDER/$DOCKERIMAGE
     
    artifacts:
        when: always # return artifacts even after job failure       
        paths:
        - $ARTIFACT_FOLDER/dockle_results.json
 
Trivy:
    # Analysing docker image and package dependencies against several CVE bases
    stage: scan   
    image: docker:git
    tags:
    - docker
 
    script:
    # getting the latest Trivy
    - apk add rpm
    - export VERSION=$(wget -q -O - https://api.github.com/repos/knqyf263/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/knqyf263/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz && tar zxf trivy_${VERSION}_Linux-64bit.tar.gz
     
    # displaying all vulnerabilities w/o failing the build
    - ./trivy -d --cache-dir $TRIVYCACHE -f json -o $ARTIFACT_FOLDER/trivy_results.json --exit-code 0 -i $ARTIFACT_FOLDER/$DOCKERIMAGE       
    
    # write vulnerabilities info to stdout in human readable format (reading pure json is not fun, eh?). You can remove this if you don't need this.
    - ./trivy -d --cache-dir $TRIVYCACHE --exit-code 0 -i $ARTIFACT_FOLDER/$DOCKERIMAGE
 
    # failing the build if the SHOWSTOPPER priority is found
    - ./trivy -d --cache-dir $TRIVYCACHE --exit-code 1 --severity $SHOWSTOPPER_PRIORITY --quiet -i $ARTIFACT_FOLDER/$DOCKERIMAGE       
         
    artifacts:
        when: always # return artifacts even after job failure
        paths:
        - $ARTIFACT_FOLDER/trivy_results.json
 
    cache:
        paths:
        - .cache
 
Report:
    # combining tools outputs into one HTML
    stage: report
    when: always
    image: python:3.5
    tags:
    - docker
     
    script:
    - mkdir json
    - cp $ARTIFACT_FOLDER/*.json ./json/
    - pip install json2html
    - wget https://raw.githubusercontent.com/Swordfish-Security/docker_cicd/master/convert_json_results.py
    - python ./convert_json_results.py
     
    artifacts:
        paths:
        - results.html